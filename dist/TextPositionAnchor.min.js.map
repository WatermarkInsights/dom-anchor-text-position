{"version":3,"sources":["TextPositionAnchor.js"],"names":["global","factory","define","amd","exports","module","require","mod","seek","TextPositionAnchor","this","_domSeek","_interopRequireDefault","obj","__esModule","default","_classCallCheck","instance","Constructor","TypeError","getFirstTextNode","node","nodeType","Node","TEXT_NODE","document","ownerDocument","walker","createTreeWalker","SHOW_TEXT","firstChild","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","_seek","NodeFilter","root","start","end","undefined","Error","value","range","createRange","iter","createNodeIterator","count","remainder","pointerBeforeReferenceNode","setStart","referenceNode","nextNode","previousNode","setEnd","type","startNode","startContainer","startOffset","childNodes","textContent","endNode","endContainer","endOffset","selector","arguments"],"mappings":"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","file":"TextPositionAnchor.min.js","sourcesContent":["import seek from 'dom-seek';\n\nconst SHOW_TEXT = NodeFilter.SHOW_TEXT;\n\n\nfunction getFirstTextNode(node) {\n  if (node.nodeType === Node.TEXT_NODE) return node;\n  let document = node.ownerDocument;\n  let walker = document.createTreeWalker(node, SHOW_TEXT, null, false);\n  return walker.firstChild();\n}\n\n\nexport default class TextPositionAnchor {\n  constructor(root, start, end) {\n    if (root === undefined) {\n      throw new Error('missing required parameter \"root\"');\n    }\n    if (start === undefined) {\n      throw new Error('missing required parameter \"start\"');\n    }\n    if (end === undefined) {\n      throw new Error('missing required parameter \"end\"');\n    }\n    this.root = root;\n    this.start = start;\n    this.end = end;\n  }\n\n  static fromRange(root, range) {\n    if (root === undefined) {\n      throw new Error('missing required parameter \"root\"');\n    }\n    if (range === undefined) {\n      throw new Error('missing required parameter \"range\"');\n    }\n\n    let startNode = range.startContainer;\n    let startOffset = range.startOffset;\n\n    // Drill down to a text node if the range starts at the container boundary.\n    if (startNode.nodeType !== Node.TEXT_NODE) {\n      if (startOffset === startNode.childNodes.length) {\n        startNode = startNode.childNodes[startOffset - 1];\n        startNode = getFirstTextNode(startNode);\n        startOffset = startNode.textContent.length;\n      } else {\n        startNode = startNode.childNodes[startOffset];\n        startNode = getFirstTextNode(startNode);\n        startOffset = 0;\n      }\n    }\n\n    let endNode = range.endContainer;\n    let endOffset = range.endOffset;\n\n    // Drill down to a text node if the range ends at the container boundary.\n    if (endNode.nodeType !== Node.TEXT_NODE) {\n      if (endOffset === endNode.childNodes.length) {\n        endNode = endNode.childNodes[endOffset - 1];\n        endNode = getFirstTextNode(endNode);\n        endOffset = endNode.textContent.length;\n      } else {\n        endNode = endNode.childNodes[endOffset];\n        endNode = getFirstTextNode(endNode);\n        endOffset = 0;\n      }\n    }\n\n    let document = root.ownerDocument;\n    let iter = document.createNodeIterator(root, SHOW_TEXT, null, false);\n    let start = seek(iter, startNode);\n    let end = start + seek(iter, endNode);\n\n    return new TextPositionAnchor(root, start + startOffset, end + endOffset);\n  }\n\n  static fromSelector(root, selector = {}) {\n    return new TextPositionAnchor(root, selector.start, selector.end);\n  }\n\n  toRange() {\n    let root = this.root;\n    let document = root.ownerDocument;\n    let range = document.createRange();\n    let iter = document.createNodeIterator(root, SHOW_TEXT, null, false);\n\n    let {start, end} = this;\n    let count = seek(iter, start);\n    let remainder = start - count;\n\n    if (iter.pointerBeforeReferenceNode) {\n      range.setStart(iter.referenceNode, remainder);\n    } else {\n      // If the iterator advanced it will be left with its pointer after the\n      // reference node. The next node that is needed to create the range.\n      range.setStart(iter.nextNode(), remainder);\n      iter.previousNode();  // Rewind so as not to change the next result.\n    }\n\n    let length = (end - start) + remainder;\n    count = seek(iter, length);\n    remainder = length - count;\n\n    if (iter.pointerBeforeReferenceNode) {\n      range.setEnd(iter.referenceNode, remainder);\n    } else {\n      // Same as above, but no need to rewind.\n      range.setEnd(iter.nextNode(), remainder);\n    }\n\n    return range;\n  }\n\n  toSelector() {\n    return {\n      type: 'TextPositionSelector',\n      start: this.start,\n      end: this.end,\n    };\n  }\n}\n"],"sourceRoot":"./"}