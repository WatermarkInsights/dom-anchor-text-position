{"version":3,"sources":["dom-anchor-text-position.js"],"names":["global","factory","define","amd","exports","module","require","mod","seek","domAnchorTextPosition","this","_domSeek","_interopRequireDefault","obj","__esModule","default","_classCallCheck","instance","Constructor","TypeError","getFirstTextNode","node","nodeType","Node","TEXT_NODE","walker","document","createTreeWalker","NodeFilter","SHOW_TEXT","firstChild","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","_seek","TextPositionAnchor","start","end","undefined","Error","value","range","createRange","iter","createNodeIterator","body","count","remainder","pointerBeforeReferenceNode","setStart","referenceNode","nextNode","previousNode","setEnd","type","startNode","startContainer","startOffset","childNodes","textContent","endNode","endContainer","endOffset","selector"],"mappings":"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","file":"dom-anchor-text-position.min.js","sourcesContent":["import seek from 'dom-seek'\n\n\nfunction getFirstTextNode(node) {\n  if (node.nodeType === Node.TEXT_NODE) return node;\n  let walker = global.document.createTreeWalker(\n    node, NodeFilter.SHOW_TEXT, null, false);\n  return walker.firstChild();\n}\n\n\nexport default class TextPositionAnchor {\n  constructor(start, end) {\n    if (start === undefined) {\n      throw new Error('missing required parameter \"start\"');\n    }\n    if (end === undefined) {\n      throw new Error('missing required parameter \"end\"');\n    }\n    this.start = start;\n    this.end = end;\n  }\n\n  static fromRange(range) {\n    if (range === undefined) {\n      throw new Error('missing required parameter \"range\"');\n    }\n\n    let startNode = range.startContainer;\n    let startOffset = range.startOffset;\n\n    if (startNode.nodeType !== Node.TEXT_NODE) {\n      if (startOffset === startNode.childNodes.length) {\n        startNode = startNode.childNodes[startOffset - 1];\n        startNode = getFirstTextNode(startNode);\n        startOffset = startNode.textContent.length;\n      } else {\n        startNode = startNode.childNodes[startOffset];\n        startNode = getFirstTextNode(startNode);\n        startOffset = 0;\n      }\n    }\n\n    let endNode = range.endContainer;\n    let endOffset = range.endOffset;\n\n    if (endNode.nodeType !== Node.TEXT_NODE) {\n      if (endOffset === endNode.childNodes.length) {\n        endNode = endNode.childNodes[endOffset - 1];\n        endNode = getFirstTextNode(endNode);\n        endOffset = endNode.textContent.length;\n      } else {\n        endNode = endNode.childNodes[endOffset];\n        endNode = getFirstTextNode(endNode);\n        endOffset = 0;\n      }\n    }\n\n    let iter = global.document.createNodeIterator(\n      global.document.body, NodeFilter.SHOW_TEXT, null, false);\n\n    let start = seek(iter, startNode);\n    let end = start + seek(iter, endNode);\n\n    return new TextPositionAnchor(start + startOffset, end + endOffset);\n  }\n\n  static fromSelector(selector) {\n    if (selector === undefined) {\n      throw new Error('missing required parameter \"selector\"');\n    }\n    return new TextPositionAnchor(selector.start, selector.end);\n  }\n\n  toRange() {\n    let range = global.document.createRange();\n    let iter = global.document.createNodeIterator(\n      global.document.body, NodeFilter.SHOW_TEXT, null, false);\n\n    let {start, end} = this;\n    let count = seek(iter, start);\n    let remainder = start - count;\n\n    if (iter.pointerBeforeReferenceNode) {\n      range.setStart(iter.referenceNode, remainder);\n    } else {\n      range.setStart(iter.nextNode(), remainder);\n      iter.previousNode();\n    }\n\n    let length = (end - start) + remainder;\n\n    count = seek(iter, length);\n    remainder = length - count;\n\n    if (iter.pointerBeforeReferenceNode) {\n      range.setEnd(iter.referenceNode, remainder);\n    } else {\n      range.setEnd(iter.nextNode(), remainder);\n    }\n\n    return range;\n  }\n\n  toSelector() {\n    return {\n      type: 'TextPositionSelector',\n      start: this.start,\n      end: this.end,\n    };\n  }\n}\n"],"sourceRoot":"./"}